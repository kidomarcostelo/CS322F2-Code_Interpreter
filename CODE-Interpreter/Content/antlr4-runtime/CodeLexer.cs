//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Kid Omar Costelo\Documents\School\3rd year 2nd sem\CODE-Interpreter\CODE-Interpreter\CODE-Interpreter\Content\Code.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class CodeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, NEWLINE=2, TAB=3, IDENTIFIER=4, BEGIN_CODE=5, END_CODE=6, DATA_TYPE=7, 
		BOOL=8, INTEGER=9, FLOAT=10, CHAR=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "NEWLINE", "TAB", "IDENTIFIER", "BEGIN_CODE", "END_CODE", "DATA_TYPE", 
		"BOOL", "INTEGER", "FLOAT", "CHAR"
	};


	public CodeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CodeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'='", null, "'\t'", null, "'BEGIN CODE'", "'END CODE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NEWLINE", "TAB", "IDENTIFIER", "BEGIN_CODE", "END_CODE", 
		"DATA_TYPE", "BOOL", "INTEGER", "FLOAT", "CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Code.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CodeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\r', 'h', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x6', '\x3', '\x1E', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x1F', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'J', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'U', '\n', '\t', 
		'\x3', '\n', '\x6', '\n', 'X', '\n', '\n', '\r', '\n', '\xE', '\n', 'Y', 
		'\x3', '\v', '\x6', '\v', ']', '\n', '\v', '\r', '\v', '\xE', '\v', '^', 
		'\x3', '\v', '\x3', '\v', '\x6', '\v', '\x63', '\n', '\v', '\r', '\v', 
		'\xE', '\v', '\x64', '\x3', '\f', '\x3', '\f', '\x2', '\x2', '\r', '\x3', 
		'\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', 
		'\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x3', 
		'\x2', '\x5', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x3', '\x2', '\x32', ';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x2', 
		'o', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\a', '!', '\x3', '\x2', '\x2', 
		'\x2', '\t', '#', '\x3', '\x2', '\x2', '\x2', '\v', '%', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\x30', '\x3', '\x2', '\x2', '\x2', '\xF', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x11', 'T', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x15', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x17', '\x66', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '?', 
		'\x2', '\x2', '\x1A', '\x4', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', 
		'\a', '\xF', '\x2', '\x2', '\x1C', '\x1E', '\a', '\f', '\x2', '\x2', '\x1D', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x6', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\a', '\v', '\x2', '\x2', '\"', '\b', '\x3', '\x2', '\x2', '\x2', '#', 
		'$', '\t', '\x2', '\x2', '\x2', '$', '\n', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\a', '\x44', '\x2', '\x2', '&', '\'', '\a', 'G', '\x2', '\x2', 
		'\'', '(', '\a', 'I', '\x2', '\x2', '(', ')', '\a', 'K', '\x2', '\x2', 
		')', '*', '\a', 'P', '\x2', '\x2', '*', '+', '\a', '\"', '\x2', '\x2', 
		'+', ',', '\a', '\x45', '\x2', '\x2', ',', '-', '\a', 'Q', '\x2', '\x2', 
		'-', '.', '\a', '\x46', '\x2', '\x2', '.', '/', '\a', 'G', '\x2', '\x2', 
		'/', '\f', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', 'G', '\x2', 
		'\x2', '\x31', '\x32', '\a', 'P', '\x2', '\x2', '\x32', '\x33', '\a', 
		'\x46', '\x2', '\x2', '\x33', '\x34', '\a', '\"', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\x45', '\x2', '\x2', '\x35', '\x36', '\a', 'Q', '\x2', 
		'\x2', '\x36', '\x37', '\a', '\x46', '\x2', '\x2', '\x37', '\x38', '\a', 
		'G', '\x2', '\x2', '\x38', '\xE', '\x3', '\x2', '\x2', '\x2', '\x39', 
		':', '\a', 'K', '\x2', '\x2', ':', ';', '\a', 'P', '\x2', '\x2', ';', 
		'J', '\a', 'V', '\x2', '\x2', '<', '=', '\a', '\x45', '\x2', '\x2', '=', 
		'>', '\a', 'J', '\x2', '\x2', '>', '?', '\a', '\x43', '\x2', '\x2', '?', 
		'J', '\a', 'T', '\x2', '\x2', '@', '\x41', '\a', '\x44', '\x2', '\x2', 
		'\x41', '\x42', '\a', 'Q', '\x2', '\x2', '\x42', '\x43', '\a', 'Q', '\x2', 
		'\x2', '\x43', 'J', '\a', 'N', '\x2', '\x2', '\x44', '\x45', '\a', 'H', 
		'\x2', '\x2', '\x45', '\x46', '\a', 'N', '\x2', '\x2', '\x46', 'G', '\a', 
		'Q', '\x2', '\x2', 'G', 'H', '\a', '\x43', '\x2', '\x2', 'H', 'J', '\a', 
		'V', '\x2', '\x2', 'I', '\x39', '\x3', '\x2', '\x2', '\x2', 'I', '<', 
		'\x3', '\x2', '\x2', '\x2', 'I', '@', '\x3', '\x2', '\x2', '\x2', 'I', 
		'\x44', '\x3', '\x2', '\x2', '\x2', 'J', '\x10', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\a', 'V', '\x2', '\x2', 'L', 'M', '\a', 'T', '\x2', 
		'\x2', 'M', 'N', '\a', 'W', '\x2', '\x2', 'N', 'U', '\a', 'G', '\x2', 
		'\x2', 'O', 'P', '\a', 'H', '\x2', '\x2', 'P', 'Q', '\a', '\x43', '\x2', 
		'\x2', 'Q', 'R', '\a', 'N', '\x2', '\x2', 'R', 'S', '\a', 'U', '\x2', 
		'\x2', 'S', 'U', '\a', 'G', '\x2', '\x2', 'T', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'O', '\x3', '\x2', '\x2', '\x2', 'U', '\x12', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'X', '\t', '\x3', '\x2', '\x2', 'W', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '[', ']', '\t', '\x3', '\x2', '\x2', '\\', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '\\', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\x3', '\x2', '\x2', '\x2', '`', '\x62', '\a', '\x30', '\x2', '\x2', 
		'\x61', '\x63', '\t', '\x3', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x16', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\t', '\x4', 
		'\x2', '\x2', 'g', '\x18', '\x3', '\x2', '\x2', '\x2', '\t', '\x2', '\x1F', 
		'I', 'T', 'Y', '^', '\x64', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
